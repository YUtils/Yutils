plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'com.github.dcendents.android-maven'
    id 'org.jetbrains.dokka'
}
group = 'com.github.yutils'

android {
    compileSdkVersion 30
    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 30
        versionCode 32
        versionName "1.3.7"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        //build release 版本时开启lint检测
        checkReleaseBuilds true
        //lint 遇到error时继续构建，true为不继续构建(默认)，false为继续构建
        abortOnError false
    }

    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    buildFeatures {
        dataBinding = true
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.2.0'
    testImplementation 'junit:junit:4.13.1'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    //gson  <!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
    implementation 'androidx.recyclerview:recyclerview:1.1.0'

    implementation 'com.github.yutils:yhttp:1.0.7'

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'

    // FST要用到以下3个包
    // https://mvnrepository.com/artifact/de.ruedigermoeller/fst
//    implementation group: 'de.ruedigermoeller', name: 'fst', version: '2.57'
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core
//    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.9.6'
    // https://mvnrepository.com/artifact/org.objenesis/objenesis
//    implementation group: 'org.objenesis', name: 'objenesis', version: '2.6'

    //____________________________________________________________RxJava____________________________________________________________
    //rxjava2，https://mvnrepository.com/artifact/io.reactivex.rxjava2/rxjava
    implementation group: 'io.reactivex.rxjava2', name: 'rxjava', version: '2.2.20'
    //rxandroid，https://mvnrepository.com/artifact/io.reactivex.rxjava2/rxandroid
    implementation group: 'io.reactivex.rxjava2', name: 'rxandroid', version: '2.1.1'
    //自动解绑，https://mvnrepository.com/artifact/com.trello.rxlifecycle3/rxlifecycle-components
    implementation group: 'com.trello.rxlifecycle3', name: 'rxlifecycle-components', version: '3.1.0'
    // https://mvnrepository.com/artifact/com.blankj/rxbus
    implementation group: 'com.blankj', name: 'rxbus', version: '1.6'
    //____________________________________________________________RxJava____________________________________________________________
}

//打包jar;doc;sources，请在Terminal中运行：gradlew makeJar，如果失败，先执行：gradlew assembleDebug --rerun-tasks
def jarName = "yutils1.3.7"
task makeJar(type: Copy) {
    group = 'jar'
    //删除存在的
    delete 'build/libs/' + jarName + ".jar"
    //设置拷贝的文件
    from("build/intermediates/aar_main_jar/release")
    //打进jar包后的文件目录,将classes.jar放入build/libs/目录下
    into('build/libs/')
    //要打包的jar文件
    include('classes.jar')
    //重命名
    rename('classes.jar', jarName + ".jar")
}
//buid之后执行
makeJar.dependsOn(build)
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}
//生成源码
task generateSourcesJar(type: Jar) {
    group = 'jar'
    if (project.hasProperty("kotlin")) {
        from android.sourceSets.main.java.getSrcDirs()
    } else if (project.hasProperty("android")) {
        from android.sourceSets.main.java.sourceFiles
    } else {
        println project
        from sourceSets.main.allSource
    }
    classifier = 'sources'
    archiveName = jarName + '-sources.jar'
}

//生成文档
task generateJavadoc(type: Jar, dependsOn: dokkaJavadoc) {
    group = 'jar'
    classifier = 'javadoc'
    from 'build/dokka/javadoc'
    archiveName = jarName + '-javadoc.jar'
}
//加入到build
artifacts {
    archives generateSourcesJar
    //archives generateJavadoc
}